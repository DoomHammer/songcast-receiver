# Features

- [X] query preset
- [X] either play by URI (both OHZ and OHU/OHM)
- [X] adjust latency correctly
- [X] detect samplerate/format changes and re-open pulseaudio stream appropiately
- [X] finish preset parsing
- [X] OHU forwarding
- [ ] build code for managing missed frames. sorted list of integers?
- [ ] port to async API
- [ ] init/destroy for player.c (also to handle null uri)
- [ ] PA_STREAM_ADJUST_LATENCY
- [ ] if buffer runs down to 20ms, fade off?
- [ ] fade in once buffer is 100% filled again
- [ ] handle out of order packets (epoll might help). Use a heap to store frames when previous frames are missing.
- [ ] implement resend request
- [ ] clean shutdown on ctrl-c, send leave message
- [ ] if ohz: continually listen for matching zone uri messages and switch if changed
- [ ] actually close sockets! (ohz)
- [ ] synchronize playback by tweaking the samplerate a little (less then 0.1%)
- [ ] handle OHM null URL. could be tested with rebooted DSM. it should send null URL first, then transition to real URI later
- [ ] send join until track and metatext is received. adhere to flow diagram
- [ ] port to c++? just for learning?
- [ ] check whether destination multicast group matches
- [ ] determine how much of the buffer we control and how much is up to pulseaudio (for resents)
- [ ] can we use linux network timestamps?
- [ ] display codec name
- [ ] display track and metadata
- [ ] set pulseaudio input name to something meaningful
- [ ] create new stream with different sample spec in advance by scanning for changes in buffer?
- [ ] tolerate some amount of out-of-order frames? i.e. wait a few frames before sending resend requests?
